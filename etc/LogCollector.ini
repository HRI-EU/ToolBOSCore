[LogCollector]
; DEBUG LEVEL
; This is the debug level for LogCollector core 
; 0 = no output
; 1 = basic output
; 2 = basic output + log counter
; >2 = debug information
debugLevel = 1

; PORT
; The port where LogCollector will listen
port = 2828

; LOG MESSAGE SIZE
; Maximum message size of logs handled by LogCollector
logmsgsize = 8192 

; STATIC PLUGINS
; This line is to set the static plugins which will be loaded
; at startup
; 
; SYNTAX
; plugins = <PluginName1>:static, <PluginName2>:static, ... , <PluginNameN>:static
;
; EXAMPLES
;
; plugins = LogFilePlugin:static
; plugins = LogSQLPlugin:static
; plugins = RTBOSStatisticsPlugin:static
; plugins = LogFilePlugin:static,RTBOSStatisticsPlugin:static

[LogList]
; MEMORY LIMIT
; Maximum number of logs that can be cached
maxcachedlog = 0           

; TRASH SIZE
; Number of logs that will be trashed in case of memory limit overhead
trashcachedlog = 0

; DEBUG LEVEL
; Debug level for LogList component
;
; debugLevel = 0

[RTBOSStatistics]
; ACTIVATE SERIALIZATION
; Set this flag to 1 if you desire to serialize statistics into a stream
serializeflag = 0

; DATABASE FILENAME
; File path for statistics dumping
statsfile = "/tmp/statsDB.db"
; Regular expression list          

; SERIALIZATION CHANNEL
; String used to open the IOChannel which will be used to store statistics
serializechannel = "stream = File name = '/tmp/tempFile.txt' mode = 'IOCHANNEL_MODE_RW|IOCHANNEL_MODE_CREAT' perm = 'IOCHANNEL_PERMISSIONS_ALL'"

; SERIALIZATION FORMAT
; Format used to serialize to stream
serializeformat = "Ascii"

; SERIALIZATION OPTIONS
; Options to pass to Serialize object
serializeoptions = "SERIALIZE_STREAMMODE_NORMAL | SERIALIZE_MODE_WRITE"

; Rules to be matched are expressed with regular expression. 
; Each of this rule has a callback which is ativated when they match.
;
; START DOCOMPUTE
; Match a StartDocompute event of a BBCM
startdocompute_regex = "^(CAdaptorEvent { msg = \")(?<componentName>(?:[a-z0-9_]+))(:StartDoCompute\")"

; END DOCOMPUTE
; Match a EndDocompute event of a BBCM
enddocompute_regex = "^(CAdaptorEvent { msg = \")(?<componentName>(?:[a-z0-9_]+))(:StopDoCompute\")"

; BBDM DECLARATION
; Match a a declaration of a early created BBDM 
handlebbdm_regex = "(Declaring )\'(?<componentName>(.*?))\'.*?(BBDM).*?"

[LogSQLPlugin]
; FILENAME
; Name of the file where logs will be stored
filename = "/tmp/dbsql-log.db"

; RECORD LIMIT
; Maximum number of records that will be stored 
recordlimit = 0

; TIME LIMIT
; Time range for logs that will be stored. Logs out of this range will be trashed
timelimit = 0

[LogFilePlugin]
; FILENAME
; Name of the file where logs will be stored
filename = /tmp/db-log.db

; SIZE LIMIT
; Maximum size of the database file
sizelimit = 0

; RECORD LIMIT
; Maximum number of records that will be stored 
recordlimit = 0

; TIME LIMIT
; Time range for logs that will be stored. Logs out of this range will be trashed
timelimit = 0


; ==============   DEBUG  =============
;
; It is possible to set a specific debug level for each component of LogCollector
; uncomment the following lines in case of needs

;[LogFile]
; DEBUG LEVEL
; Debug level for LogFile component
;
; debugLevel = 0

;[LogSQL]
; DEBUG LEVEL
; Debug level for LogSQL component
;
; debugLevel = 0

;[LogInstanceData]
; DEBUG LEVEL
; Debug level for LogInstanceData component
;
; debugLevel = 0

;[RTBOSComponent]
; DEBUG LEVEL
; Debug level for RTBOSComponent component
;
; debugLevel = 0

;[RegexRuleMatcher]
; DEBUG LEVEL
; Debug level for RegexRuleMatcher component
;
; debugLevel = 0

;[LogProviderPlugin]
; DEBUG LEVEL
; Debug level for LogProviderPlugin component
;
; debugLevel = 0

;[LogConsumerPlugin]
; DEBUG LEVEL
; Debug level for LogConsumerPlugin component
;
; debugLevel = 0

;[LogFilePlugin]
; DEBUG LEVEL
; Debug level for LogFilePlugin component
;
; debugLevel = 0

;[RTBOSStatisticsPlugin]
; DEBUG LEVEL
; Debug level for RTBOSStatisticsPlugin component
;
; debugLevel = 0

