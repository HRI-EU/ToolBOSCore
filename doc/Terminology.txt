
TOOLBOSCORE API TERMINOLOGY
===========================


Whenever applicable the following identifiers shall be used in the code,
for consistency reasons.


sitRootPath

  - main directory of the root SIT (main installation), e.g.:

    /hri/sit/latest


sitProxyPath

  - main directory of the user's proxy SIT, e.g.:

    /home/username/.HRI/sit/latest


sitPath

  - location of an unspecific SIT (if it does not matter if
    a proxy or the root SIT is taken), e.g.:

    /hri/sit/latest
    /hri/sit/builds/<timestamp>
    /home/username/.HRI/sit/latest


canonicalPath

  - An independently installed software module within the SIT.
    Separate major/minor versions of a package are treated as
    individual packages, because they could be managed by
    separate maintainers etc.

  - This is only about major.minor versions. Patchlevel versions
    (revisions) are not considered separate packages, e.g.:

    Libraries/Serialize/3.0


package

  - An instance of the High-Level Package API, f.i. "AbstractPackage" and
    all its subclasses if no disambiguation is needed.

  - Instances of sub-classes shall be named:
    * bstpkg (for instances of class BSTPackage)
    * debpkg (for instances of class DebianPackage)


packageURL

  - Extended version, also O.S. distribution packages and/or specific SITs
    can be referenced, e.g.:

    sit://Libraries/Serialize/3.0
    deb://binutils
    rpm://gcc


packageName

  - only the name of a package, e.g.:

    Serialize
    gcc


packageVersion

  - major.minor version of package, e.g.:

    3.0


packageCategory

  - installation subdirectory (category), e.g.:

    Libraries
    Modules/BBCM/InputOutput


packagePath

  - absolute path to a package within a specific SIT

    /hri/sit/latest/Libraries/Serialize/3.0


packageID

  - integer number representing a given package within the SITDB


packageFullVersion

  - full allowed version string (see install conventions), e.g.:

    3.0
    3.0.42
    3.0.42-experimental


details

  - An instance of the Python class 'Exception' (and all its sub-classes),
    e.g.:

    try:
        # whatever
    except AssertionError as details:
        # error handling


# EOF
