# -*- coding: utf-8 -*-
#
#  BashSrc writer
#
#  Copyright (c) Honda Research Institute Europe GmbH
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are
#  met:
#
#  1. Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  3. Neither the name of the copyright holder nor the names of its
#     contributors may be used to endorse or promote products derived from
#     this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
#  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
#  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
#  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#


import os

from ToolBOSCore.Storage.AbstractWriter import AbstractWriter
from ToolBOSCore.Storage.SIT            import strip


class BashSrcWriter( AbstractWriter ):

    def addLeadIn( self ):
        return '# BashSrc auto-generated by ToolBOSCore\n\n'


    # let's see if these information are necessary at all:
    #
    #   2012-04-13  M.Stein
    #   Yes, they are! Some software have a userSrc.php in which they make
    #   use of these variables to avoid hard-coding values.
    #
    def addBasicInfo( self ):
        startPath = os.path.join( '${SIT}', self.details.packageCategory )

        return 'PROJECT_NAME="%s"\n'         % self.details.packageName + \
               'FULL_VERSION="%s"\n'         % self.details.packageVersion + \
               'PROJECT_START_PATH="%s"\n\n' % startPath


    def addDependencies( self ):
        pkgList   = map( lambda s: strip( s ), self.details.inheritedProjects )

        intro     = 'SIT_DEPENDENCIES="'
        separator = ' \\\n%s' % ( ' ' * len( intro ) )
        data      = separator.join( pkgList )
        outro     = '"\n\n'

        return intro + data + outro


    def addMainLoop( self ):
        values = { 'name':          self.details.packageName,
                   'version':       self.details.packageVersion,
                   'canonicalPath': self.details.canonicalPath,
                   'startPath':     os.path.join( '${SIT}', self.details.packageCategory ),
                   'checkExpr':     '! ${TOOLBOSCORE_SOURCED} =~ "%s"' %
                                    self.details.canonicalPath }

        substMap = { '${PROJECT_NAME}':       values['name'],
                     '${FULL_VERSION}':       values['version'],
                     '${PROJECT_START_PATH}': values['startPath'],
                     '${HRI_GLOBAL_ROOT}':    '${SIT}' }


        # avoid multiple inclusion (check if already sourced)

        content = 'if [[ %(checkExpr)s ]]\nthen\n\n' \
                  '    # avoid multiple inclusion\n' \
                  '    export TOOLBOSCORE_SOURCED="%(canonicalPath)s ${TOOLBOSCORE_SOURCED}"\n\n' \
                  % values


        # add package to LD_LIBRARY_PATH if it contains a library

        if os.path.isdir( os.path.join( self.details.topLevelDir, 'lib' ) ):
            content += '    export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:' \
                       '${SIT}/%(canonicalPath)s/lib/${MAKEFILE_PLATFORM}"\n\n' \
                       % values


        if self.details.userSrcEnv or self.details.userSrcAlias:
            content += "    # pkgInfo.py entries:\n"

        for ( key, value ) in self.details.userSrcEnv:
            content += '    export %s="%s"\n' % ( key, self._replace( value, substMap ) )

        for ( key, value ) in self.details.userSrcAlias:
            content += '    alias %s="%s"\n' % ( key, self._replace( value, substMap ) )

        if self.details.userSrcBashCode:
            content += '\n    # userSrc Bash code:\n'

            for line in self.details.userSrcBashCode:
                content += '    ' + line + '\n'

        content += '\n    # source all dependencies\n' \
                   '    for i in ${SIT_DEPENDENCIES}\n' \
                   '    do\n' \
                   '        if [[ ! -z $VERBOSE ]]\n' \
                   '        then\n' \
                   '            echo "[%(canonicalPath)s/BashSrc] Sourcing ${SIT}/${i}/BashSrc"\n' \
                   '        fi\n\n' \
                   '        source "${SIT}/${i}/BashSrc"\n' \
                   '    done\n\n' \
                   'fi\n' \
                   % values

        return content


# EOF
