# -*- coding: utf-8 -*-
#
#  CmdSrc writer
#
#  Copyright (c) Honda Research Institute Europe GmbH
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are
#  met:
#
#  1. Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  3. Neither the name of the copyright holder nor the names of its
#     contributors may be used to endorse or promote products derived from
#     this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
#  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
#  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
#  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#


import os

from ToolBOSCore.Storage.AbstractWriter import AbstractWriter
from ToolBOSCore.Storage.SIT            import strip


class CmdSrcWriter( AbstractWriter ):

    def addLeadIn( self ):
        return ':: CmdSrc.bat auto-generated by ToolBOSCore\n' \
               '@echo off\n\n'

    # let's see if these information are necessary at all:
    #
    #def addBasicInfo( self ):
        #startPath = os.path.join( '%SIT%', self.details.packageCategory )

        #return "set PROJECT_NAME=%s\n"         % self.details.packageName + \
               #"set FULL_VERSION=%s\n"         % self.details.packageVersion + \
               #"set PROJECT_START_PATH=%s\n\n" % startPath

    def addDependencies( self ):
        pkgList   = map( lambda s: os.path.join( '%SIT%', strip( s ), 'CmdSrc' ),
                         self.details.inheritedProjects )

        intro     = 'set INHERITED_PROJECTS='
        data      = ' '.join( pkgList )

        return intro + data + "\n\n"


    def addMainLoop( self ):
        values = { 'name':      self.details.packageName,
                   'version':   self.details.packageVersion,
                   'canonicalPath': self.details.canonicalPath,
                   'startPath': os.path.join( '%SIT%', self.details.packageCategory ) }

        substMap = { '${PROJECT_NAME}':       values['name'],
                     '${FULL_VERSION}':       values['version'],
                     '${PROJECT_START_PATH}': values['startPath'] }

        content = 'echo %%PATH%% | find "%(canonicalPath)s" > null\n\n' \
                  ':: if already set then quit\n' \
                  'if %%errorlevel%% equ 0 ( goto :EOF )\n\n' \
                  ':: Run-time libraries paths\n' \
                  'set PATH=%%PATH%%;%%SIT%%/%(canonicalPath)s/lib/%%MAKEFILE_PLATFORM%%\n\n' \
                  % values

        if self.details.userSrcEnv or self.details.userSrcAlias:
            content += ":: pkgInfo.py entries:\n"

        for ( key, value ) in self.details.userSrcEnv:
            content += 'set %s=%s\n' % ( key, self._replace( value, substMap ) )

        for ( key, value ) in self.details.userSrcAlias:
            content += ':: alias %s=%s\n' % ( key, self._replace( value, substMap ) )

        if self.details.userSrcCmdCode:
            content += '\n:: userSrc cmd.exe code:\n'

            for line in self.details.userSrcCmdCode:
                content += line + '\n'

        content += '\n:: Source all inherited projects\n' \
                   'set ELEMENTS=%%INHERITED_PROJECTS%%\n\n' \
                   ':_loopProjects\n' \
                   'for /F "tokens=1* delims= " %%%%a in ( "%%ELEMENTS%%" ) do (\n\n' \
                   '  if defined VERBOSE echo [%(canonicalPath)s/CmdSrc] Sourcing %%%%a\n\n' \
                   '  call "%%%%a"\n\n' \
                   '  set ELEMENTS=%%%%b\n' \
                   '  if defined ELEMENTS goto :_loopProjects\n' \
                   ')\n' \
                   % values

        return content


# EOF
